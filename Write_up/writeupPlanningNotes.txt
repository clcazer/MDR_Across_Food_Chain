MANUSCRIPT OUTLINE

###############################################################################################################################

INTODUCTION:

describe definition of MDR and why it's important
describe the difficulties of analyzing MDR (maybe include some ways it has been analyzed previously)
introduce association rule mining
explain how it works briefly, but refer back to chicken paper for more in depth explanation
briefly review the previous applications of association rule mining for this purpose
describe gap (no genotype analysis or comparison; need to apply to more species, sources, and datasets etc..)
introduce the goal of the current study (cattle associated e coli phenotype and phenotype across the food supply chain)
explain the importance to human health to analyze MDR throughout the food supply chain
touch on the potential profit of comparing mdr patterns from genes vs MIC--
          whether enough drugs are being tested against
          expose/clarify the relation/conflict between the phenotypic based definition of MDR and genotypic indicators


###############################################################################################################################

METHODS:

WRITING-
[DONE]describe data sources
[DONE]describe data cleaning--
      [DONE]anitmicrobials looked at (refer to prevalence table/drug table)
       [DONE] interpretation of MIC values
       [DONE] explain availability of genetic info
       [DONE] explain classification of genes
[DONE]describe association rule mining implementation
       [DONE] state that we're using arules package for implementation and give some info about (algorithm, hierarchy, multi LHS & single RHS)
describe measure selection--
        the need to prune/choose measures to do so
        describe the pca appraoch
        describe the desired properties of the measures
        describe each one of the chosen measures
describe cut-off selection--
        explain that there is a minimum number rules needed to represent each class (refer to figure)
        describe or refer to (if already described previously) the inherently meaningfull cut-offs of the chosen measures
        describe comparsion between #rules vs cut-off (shows that the inherent cut-offs seem to be appropriate; refer to figure)
        explain that the figures show each measure examine independently and pruning together has a combined effect, and so jaccard
        and support need to be set to zero in order to prevent over-pruning
        explain that the cut-off severity was limited by the Retail Meats data set because it overall and had lower sample sizes
        and produced less pre-pruned rules than cecal
describe analysis methods--
        percent captured measure
        network graph comparisons
        tabluation comparison


Figures/TABLES FROM CODE-
fig of Rarefaction rule v class |
                                | NEED TO put these into panel somehow (provisionally use ppt, later set up method detailed below)
fig of rule v cutoff            |
include drug, class, abbreviation, years tested, dataset tested, resistance breakpoint table (NEED TO MAKE THIS TABLE)
Prevalence describtives tables (phenotype antimicrobial level; 
genotype class level [gene level csv as supplemental]) (NEED TO FIX AND ADD NAHLN)

###################################################################################################################################

RESULTS:

WRITING-
describe pruning results--
        report overall range of rule numbers before and after pruning
        report average number of rules for each dataset (retail meats, cecal, NAHLN) before and after pruning
        ^NEED TO write some code to compute these things
describe percent captured analyis--
        note the asymetry in gene vs phenotype; and how it differs depending on the inclusion of strep
        note the greater rule consistency for cecal, and cecal's superior ability to capture retail rules
describe network graphs--
        highlight major patterns/associations selection
        highlight year/sources where graphs are more or less dense
        note how they seem to change over time
        higlight cases where genotype graphs and phenotype graphs mismatch
        note the the class and subclasses that are the source of the mismatch
describe tabulation comparison--
        note how the rules were able to capture the tabulated patterns
        note the added information afforded by the interest measures and knowing not only
        what patterns there are but also knowing how different patterns are associated with each other


FIGURES/TABLES FROM CODE-
Percent captured panel (NEED TO FIX AND ADD NAHLN)
Network graphs panel (NEED TO ADD NAHLN)
tabulation comparison table (NEED TO ADD CENTRAL TENDENCY OF EACH INTEREST MEASURE) 

###################################################################################################################################

DISCUSSION/CONCLUSIONS

association rule mining was able to provide the information provided by a traditional analysis and more.

cecal vs retail datasets (perhaps a sample size issue), cecal seems to have more information on the full scope of MDR
^which is interesting because cecal is from slaughterhouses, so it seems like those MDR patterns should be propagated to
retail environment, so perhaps only a subset of patterns are being selected in the retail data.

Genotype captured phenotype rules better than vice versa. Seems to be driven largely by drug specific Aminoglycoside resistance
genes for drugs that were not tested in the the dataset. This suggests that perhaps more drugs should be tested (those shown in the
subclasses of the network graph nodes). Also brings up how genotypic information should factor in defining MDR.

Make some point about what this tells us about MDR surveillance/trends-- rule increase over year/differently for different sources?
Do the common rules tell us anything? Like, potential common mechanisms, or common environmental factors that lead to the selection
of these associated MDR patterns (which might be able to be pinpointed to reduce such selection pressure)?

















#################################################################################################################
ON CREATING PLOTS FROM SAVED IMAGES:
##################################################################################################################
##################################################################################################################
Yes, it is possible to construct a panel of graphs from images that are already saved. This is often referred to as "arranging" or "composing" multiple images into a single panel.

In R, you can use the grid.arrange() function from the gridExtra package to arrange multiple images into a single panel. Here's an example:

r
CopyInsert
library(gridExtra)

# Load the images
img1 <- readPNG("image1.png")
img2 <- readPNG("image2.png")
img3 <- readPNG("image3.png")

# Arrange the images into a panel
grid.arrange(img1, img2, img3, ncol = 3)
This will create a panel with three images, arranged horizontally.

Alternatively, you can use the par() function to set up a multi-panel plot, and then use the readPNG() function to load each image into the corresponding panel. Here's an example:

r
CopyInsert
# Set up a multi-panel plot
par(mfrow = c(1, 3))

# Load and plot each image
plot(readPNG("image1.png"))
plot(readPNG("image2.png"))
plot(readPNG("image3.png"))
This will also create a panel with three images, arranged horizontally.

Note that in both cases, you'll need to make sure that the images are in the correct format (e.g. PNG, JPEG, etc.) and are located in the correct directory.

Also, you can use ggarrange() function from ggpubr package, which is a wrapper around grid.arrange() and provides a more convenient interface for arranging multiple plots.

r
CopyInsert
library(ggpubr)

ggarrange(img1, img2, img3, ncol = 3)
It's worth noting that, if you want to add some customization to your panel, such as adding titles, labels, or legends, you may want to use a more advanced package like patchwork or cowplot.





Yes, you can use already saved images with patchwork or cowplot by using readPNG() or other image reading functions.

In patchwork, you can use the insert_plot() function to insert an image into a patchwork layout. Here's an example:

r
CopyInsert
library(patchwork)
library(png)

# Load the image
img <- readPNG("image.png")

# Create a patchwork layout
p <- plot.new()
p + insert_plot(img, 1, 1, 1, 1)
This will create a patchwork layout with the image inserted into the first row and column.

In cowplot, you can use the ggdraw() function to draw an image onto a plot. Here's an example:

r
CopyInsert
library(cowplot)
library(png)

# Load the image
img <- readPNG("image.png")

# Create a plot
p <- ggdraw() + 
  draw_image(img, x = 0, y = 0, width = 1, height = 1)
This will create a plot with the image drawn onto it.

Note that in both cases, you'll need to make sure that the image is in the correct format (e.g. PNG, JPEG, etc.) and is located in the correct directory.

Also, you can use ggdraw() function with patchwork package, it will give you more flexibility to arrange your plots.

r
CopyInsert
library(patchwork)
library(cowplot)
library(png)

# Load the image
img <- readPNG("image.png")

# Create a patchwork layout
p <- ggdraw() + 
  draw_image(img, x = 0, y = 0, width = 1, height = 1)

p + plot.new() + 
  plot.new() + 
  plot.new()
This will create a patchwork layout with the image in the first row and column, and two empty plots in the second and third row and column.